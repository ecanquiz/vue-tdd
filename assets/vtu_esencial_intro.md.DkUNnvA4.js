import{_ as s,c as a,o as i,a3 as e}from"./chunks/framework.D2SfkUqD.js";const E=JSON.parse('{"title":"¿Qué es Vue Test Utils?","description":"","frontmatter":{},"headers":[],"relativePath":"vtu/esencial/intro.md","filePath":"vtu/esencial/intro.md"}'),n={name:"vtu/esencial/intro.md"},t=e(`<h1 id="¿que-es-vue-test-utils" tabindex="-1">¿Qué es Vue Test Utils? <a class="header-anchor" href="#¿que-es-vue-test-utils" aria-label="Permalink to &quot;¿Qué es Vue Test Utils?&quot;">​</a></h1><p>Vue Test Utils (VTU), ¡la biblioteca oficial de utilidades de prueba para Vue.js! Es un conjunto de funciones de utilidad destinadas a simplificar las pruebas de los componentes de Vue.js. Proporciona algunos métodos para montar e interactuar con los componentes de Vue de forma aislada.</p><p>Veamos un ejemplo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vue/test-utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The component to test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MessageComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;p&gt;{{ msg }}&lt;/p&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;msg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;displays message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MessageComponent, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Assert the rendered text of the component</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wrapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toContain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="¿-que-aprenderemos-aqui" tabindex="-1">¿ Qué aprenderemos aquí ? <a class="header-anchor" href="#¿-que-aprenderemos-aqui" aria-label="Permalink to &quot;¿ Qué aprenderemos aquí ?&quot;">​</a></h2><p>Aquí hay una colección de ejemplos breves y enfocados en cómo probar los componentes de Vue. Utiliza vue-test-utils, la biblioteca oficial para probar los componentes de Vue, y Vitest, un marco de prueba moderno. Cubre la API vue-test-utils, así como las mejores prácticas para probar componentes.</p><p>Cada sección es independiente de las demás. Comenzamos a escribir una prueba simple. A continuación, se analizan dos formas de renderizar un componente: montar y montaje superficial. Las diferencias serán demostradas y explicadas.</p><p>De ahí en adelante, cubriremos cómo probar varios escenarios que surgen al probar componentes, como probar componentes que:</p><ul><li>Reciben accesorios</li><li>Usan propiedades calculadas</li><li>Renderizan otros componentes</li><li>Emiten eventos</li></ul><p>Y así sucesivamente. Luego pasamos a casos más interesantes, como:</p><ul><li>Mejores prácticas para probar Vuex (en componentes e independientemente)</li><li>Probando el enrutador Vue</li><li>Pruebas con componentes de terceros</li></ul><p>También exploraremos cómo usar la API de Vitest para hacer que nuestras pruebas sean más sólidas, como por ejemplo:</p><ul><li>Burlarse de las respuestas de la API</li><li>Burlarse y espiar módulos</li><li>Uso de instantáneas</li></ul>`,13),l=[t];function p(r,o,h,k,d,c){return i(),a("div",null,l)}const m=s(n,[["render",p]]);export{E as __pageData,m as default};
